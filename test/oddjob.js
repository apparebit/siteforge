/* ¬© 2020 Robert Grimm */

import { isError, TracelessError } from '@grr/oddjob/error';
import { asciify, slugify } from '@grr/oddjob/string';
import harness from './harness.js';
import { types } from 'util';

const { isNativeError } = types;

harness.test('@grr/oddjob', t => {
  t.test('error', t => {
    function X() {}
    X.prototype = new Error();

    let x = new X();
    t.ok(x instanceof Error);
    t.notOk(isNativeError(x));
    t.ok(isError(x));

    x = new Error();
    t.ok(x instanceof Error);
    t.ok(isNativeError(x));
    t.ok(isError(x));

    x = TracelessError();
    t.ok(x instanceof Error);
    t.ok(isNativeError(x));
    t.ok(isError(x));

    x = new TypeError('boo');
    t.ok(x instanceof Error);
    t.ok(isNativeError(x));
    t.ok(isError(x));

    x = TracelessError('boo', TypeError);
    t.ok(x instanceof Error);
    t.ok(isNativeError(x));
    t.ok(isError(x));

    t.end();
  });

  t.test('string', t => {
    // ------------------------------------------------------- asciify()
    t.is(
      asciify('√†√°√¢ √£√§√• √¶√ß√® √©√™√´ √¨√≠√Æ √Ø√±√≤ √≥√¥√µ √∂≈ì√∏ √π√∫√ª √º√Ω√ø √∞≈Ç√ü «Ñ«Ö«Ü'),
      'aaa aaeaa aece eee iii ino ooo oeoeoe uuu ueyy dlss DZDzdz'
    );
    t.is(
      asciify('√Ä√Å√Ç √É√Ñ√Ö √Ü√á√à √â√ä√ã √å√ç√é √è√ë√í √ì√î√ï √ñ≈í√ò √ô√ö√õ √ú√ù≈∏ √ê≈Å·∫û'),
      'AAA AAeAa AeCE EEE III INO OOO OeOeOe UUU UeYY DLSS'
    );
    t.is(asciify('„éß „èó ‚ì† ≈ø ‚Öß üÖè ·∫ö ≈â'), `m/s pH q s VIII WC a' 'n`);
    t.is(asciify('-Ôπ£Ôºç‚Äê‚ÄëÔπò‚Äì‚Äî'), '--------');

    // ------------------------------------------------------- slugify()
    t.is(slugify('√á√§≈Ç√ø at - 7 „éØ?'), 'caely-at-7-rads2');

    t.end();
  });

  t.end();
});
